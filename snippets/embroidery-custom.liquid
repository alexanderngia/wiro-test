{% comment %} 
  Renders embroidery custom.
  Accepts: 
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
 
  Usage:
  {% render 'embroidery custom', product: product, block: block, product_form_id: product_form_id %} 
{% endcomment %}

{% if product.metafields.custom.embroidery_enabled %}

  <div class="mt-6 border border-none rounded-md p-4 bg-gray-100 " data-product-id="{{ product.id }}">
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <label for="add-embroidery" class="flex items-center cursor-pointer relative">
        <input form="{{ product_form_id }}" type="checkbox" id="add-embroidery" name="properties[Add Embroidery]" value="Yes" 
        class="bg-white peer !h-7 !w-7 cursor-pointer transition-all appearance-none rounded-[5px] border border-slate-300 checked:bg-slate-800 checked:border-slate-800">
          <span class="absolute text-white opacity-0 peer-checked:opacity-100 top-1 left-1 transform w-5 h-5">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"
            stroke="currentColor" stroke-width="1">
            <path fill-rule="evenodd"
            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            clip-rule="evenodd"></path>
          </svg>
          </span>
        </label>
        <label class="cursor-pointer ml-2 text-slate-600 text-xl font-semibold" for="add-embroidery">
          Add Embroidered Name
          </label>
      </div>
      <span class="font-medium text-gray-900">+{{ product.metafields.custom.embroidery_base_price | money }}</span>
    </div>
    
    <div id="embroidery-form" class="hidden justify-between transition-all ease flex-wrap pt-4">
      <div class="w-full lg:w-[55%]">
        <div class="mb-6 h-fit">
          <label for="embroidery-name" class="text-xl block mb-4 font-semibold text-gray-700">
            Add up to {{ product.metafields.custom.embroidery_char_limit }} characters
          </label>
          <input form="{{ product_form_id }}" type="text" id="embroidery-name" name="properties[Embroidery Name]" 
            maxlength="{{ product.metafields.custom.embroidery_char_limit }}"
            class="focus:!shadow-none focus:!outline-none appearance-none w-full h-[32px] bg-white placeholder:text-slate-400 text-slate-700 font-semibold text-base border border-slate-300 rounded-md px-3 transition duration-300 ease ">
        </div>
        {% assign embroidery_option = product.metafields.custom.embroidery_options.value %}
        <div class="mb-6 flex flex-col">
          <label class="mb-4 text-xl font-semibold text-gray-700 ">Choose letter colour</label>
          <div class="flex flex-wrap gap-4">
            {% for color in embroidery_option.colors %}
              <div class="flex flex-col items-center gap-4">
                <input form="{{ product_form_id }}" type="radio" name="properties[Embroidery Color]" id="color-{{ color.value }}" value="{{ color.name }}" 
                  data-price="{{ color.price }}" {% if forloop.first %}checked{% endif %}
                  class="hidden peer opacity-0 w-full h-auto cursor-pointer" >
                <label for="color-{{ color.value }}" 
                  class="flex w-11 h-11 cursor-pointer rounded-full border border-gray-300 peer-checked:border-2 peer-checked:border-white peer-checked:outline-1 peer-checked:outline-slate-700" style="background-color: {{ color.value }}">
                </label>
                <span class="text-sm font-semibold">{{ color.name }}</span>

                </div>
            {% endfor %}
          </div>
        </div>
        
        {% if embroidery_option.fonts.size > 0 %}
          <div class="mb-6 flex flex-col">
            <label class="mb-4 text-xl font-semibold text-gray-700">Choose font</label>
          <div class="flex gap-3 w-full justify-between">
            {% for font in embroidery_option.fonts %}
              <div class="flex w-[48%] items-center justify-center">
                <input form="{{ product_form_id }}" type="radio" name="properties[Embroidery Font]" id="font-{{ font.value }}" value="{{ font.name }}" 
                  data-price="{{ font.price }}" {% if forloop.first %}checked{% endif %}
                  class="hidden opacity-0 w-full h-full cursor-pointer peer">
                <label for="font-{{ font.value }}" 
                  class="w-full text-center px-4 py-2 border border-gray-300 rounded-md cursor-pointer peer-checked:font-semibold peer-checked:border-1 peer-checked:border-white peer-checked:outline-1 peer-checked:outline-slate-700"
                  style="font-family: {{ font.value }}">
                  {{ font.name }}
                </label>
              </div>
            {% endfor %}
          </div>
        </div>
        {% endif %}
      </div>
  
      
      <div class="mb-6 text-center w-[70%] lg:w-[40%]">
        <img height="150" width="150" src="{{ product.metafields.custom.embroidery_image | img_url: 'medium' }}" 
          alt="Embroidery Preview" class="max-w-full h-auto mx-auto border border-gray-200 rounded-md">
      </div>
      
      <div class="mb-2 text-xl font-semibold text-gray-700">
        Unfortunately we can not accept returns or exchanges on embroidered items.
      </div>
    </div>
  </div>
{% endif %}


<script>
  // Bước 3: JavaScript để quản lý logic tính năng thêu
document.addEventListener('DOMContentLoaded', function() {
  // Khởi tạo tính năng thêu
  initEmbroideryFeature();
  
  // Xử lý sự kiện khi khách hàng thay đổi variant sản phẩm
  document.addEventListener('variant:change', function(event) {
    updateEmbroideryOptions(event.detail.variant);
  });
});

function initEmbroideryFeature() {
  const addEmbroideryCheckbox = document.getElementById('add-embroidery');
  const addEmbroideryCheckboxCart = document.getElementById('embroidery-section');

  if (!addEmbroideryCheckbox) return;
  
  // Hiển thị/ẩn form thêu khi checkbox được chọn
  addEmbroideryCheckbox.addEventListener('change', function() {
    const embroideryForm = document.getElementById('embroidery-form');
    if (this.checked) {
      embroideryForm.classList.remove('hidden');
      embroideryForm.classList.add('flex');
      updateTotalPrice();
    } else {
      embroideryForm.classList.add('hidden');
      updateTotalPrice();
    }
  });
  
  // Xử lý sự kiện khi người dùng thay đổi màu sắc hoặc font
  const colorOptions = document.querySelectorAll('input[name="properties[Embroidery Color]"]');
  const fontOptions = document.querySelectorAll('input[name="properties[Embroidery Font]"]');
  
  colorOptions.forEach(option => {
    option.addEventListener('change', updateTotalPrice);
  });
  
  
  // Giới hạn ký tự cho trường nhập tên
  const nameInput = document.getElementById('embroidery-name');
  const charLimit = nameInput.getAttribute('maxlength');
  
  nameInput.addEventListener('input', function() {
    if (this.value.length > charLimit) {
      this.value = this.value.substring(0, charLimit);
    }
  });
}

function updateTotalPrice() {
  const addToCartButton = document.querySelector('button[name="add"]');
  const basePrice = parseFloat(addToCartButton.getAttribute('data-base-price').replace(/[^0-9.]/g, ''));
  let totalPrice = basePrice;
  
  // Kiểm tra xem có thêu không
  const addEmbroideryCheckbox = document.getElementById('add-embroidery');
  if (addEmbroideryCheckbox && addEmbroideryCheckbox.checked) {
    // Thêm giá cơ bản cho thêu
    const embroideryPriceText = document.querySelector('.embroidery-options-container > div > span').textContent;
    const embroideryBasePrice = parseFloat(embroideryPriceText.replace(/[^0-9.]/g, ''));
    totalPrice += embroideryBasePrice;
    
    // Thêm giá cho màu sắc đã chọn
    const selectedColor = document.querySelector('input[name="properties[Embroidery Color]"]:checked');
    if (selectedColor) {
      totalPrice += parseFloat(selectedColor.getAttribute('data-price') || 0);
    }
    
    // Thêm giá cho font chữ đã chọn
    const selectedFont = document.querySelector('input[name="properties[Embroidery Font]"]:checked');
    if (selectedFont) {
      totalPrice += parseFloat(selectedFont.getAttribute('data-price') || 0);
    }
  }
  
  // Cập nhật giá hiển thị
  const priceElement = document.querySelector('.product__price');
  if (priceElement) {
    priceElement.textContent = formatMoney(totalPrice);
  }
  
  // Cập nhật data-price cho nút Add to Cart
  if (addToCartButton) {
    addToCartButton.setAttribute('data-price', totalPrice);
  }
}

function updateEmbroideryOptions(variant) {
  // Kiểm tra xem variant có hỗ trợ thêu hay không
  const embroideryContainer = document.querySelector('[data-product-id]');
  
  if (!embroideryContainer) return;
  
  fetch(`/products/${embroideryContainer.getAttribute('data-product-id')}?variant=${variant.id}&view=embroidery-json`)
    .then(response => response.json())
    .then(data => {
      if (data.embroidery_enabled) {
        embroideryContainer.classList.remove('hidden');
        
        // Cập nhật giới hạn ký tự
        const nameInput = document.getElementById('embroidery-name');
        nameInput.setAttribute('maxlength', data.embroidery_char_limit);
        
        // Cập nhật hình ảnh mẫu
        const previewImg = embroideryContainer.querySelector('img');
        if (previewImg && data.embroidery_image) {
          previewImg.src = data.embroidery_image;
        }
        
        // Cập nhật giá cơ bản
        const priceSpan = embroideryContainer.querySelector('> div > span');
        if (priceSpan) {
          priceSpan.textContent = '+' + formatMoney(data.embroidery_base_price);
        }
        
        updateTotalPrice();
      } else {
        embroideryContainer.classList.add('hidden');
      }
    })
    .catch(error => {
      console.error('Error updating embroidery options:', error);
    });
}

// Hàm hỗ trợ để định dạng tiền tệ
function formatMoney(amount) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
}
</script> 
